class MagicSquare:
    def __init__(self, size):
        if size % 2 == 0:
            raise ValueError("Size must be odd")
        self.size = size
        self.square = [[0 for _ in range(size)] for _ in range(size)]
        self.magic_constant = size * (size**2 + 1) // 2

    def generate(self):
        """Generate a magic square using Siamese method"""
        n = self.size
        num = 1
        row = n//2
        col = n-1

        while num <= (n*n):
            if row == -1 and col == n:
                col = n-2
                row = 0
            else:
                if col == n:
                    col = 0
                if row < 0:
                    row = n-1

            if self.square[row][col] != 0:
                col = col-2
                row = row+1
                continue
            else:
                self.square[row][col] = num
                num = num+1

            col = col+1
            row = row-1

    def set_square(self, matrix):
        """Set the square matrix from user input"""
        if len(matrix) != self.size or any(len(row) != self.size for row in matrix):
            raise ValueError("Invalid matrix dimensions")
        self.square = matrix

    def display(self):
        """Display the magic square with formatting"""
        max_width = len(str(self.size**2))
        print("+" + "-" * (self.size * (max_width + 1) + 1) + "+")
        
        for row in self.square:
            print("|", end=" ")
            for num in row:
                print(str(num).rjust(max_width), end=" ")
            print("|")
        
        print("+" + "-" * (self.size * (max_width + 1) + 1) + "+")
        print(f"\nMagic Constant: {self.magic_constant}")

    def verify(self):
        """Verify if the square is magic"""
        results = []
        
        # Check rows
        for row in self.square:
            results.append(sum(row) == self.magic_constant)
            
        # Check columns
        for col in range(self.size):
            column_sum = sum(self.square[row][col] for row in range(self.size))
            results.append(column_sum == self.magic_constant)
            
        # Check diagonals
        diag1_sum = sum(self.square[i][i] for i in range(self.size))
        diag2_sum = sum(self.square[i][self.size-1-i] for i in range(self.size))
        results.append(diag1_sum == self.magic_constant)
        results.append(diag2_sum == self.magic_constant)
        
        return all(results)

    def get_sums(self):
        """Get all row, column, and diagonal sums for display"""
        sums = {
            'rows': [],
            'columns': [],
            'diagonals': []
        }
        
        for row in self.square:
            sums['rows'].append(sum(row))
            
        for col in range(self.size):
            sums['columns'].append(sum(self.square[row][col] for row in range(self.size)))
            
        sums['diagonals'].append(sum(self.square[i][i] for i in range(self.size)))
        sums['diagonals'].append(sum(self.square[i][self.size-1-i] for i in range(self.size)))
        
        return sums

def get_valid_size():
    """Get a valid size for the magic square"""
    while True:
        try:
            size = int(input("Enter the size of the magic square (odd number): "))
            if size % 2 == 0:
                print("Please enter an odd number!")
                continue
            if size < 3:
                print("Size must be 3 or greater!")
                continue
            return size
        except ValueError:
            print("Please enter a valid number!")

def get_matrix_from_user(size):
    """Get matrix input from user"""
    print(f"\nEnter the {size}x{size} matrix row by row:")
    print("(Enter space-separated numbers for each row)")
    matrix = []
    
    for i in range(size):
        while True:
            try:
                row = list(map(int, input(f"Row {i+1}: ").split()))
                if len(row) != size:
                    print(f"Please enter exactly {size} numbers!")
                    continue
                matrix.append(row)
                break
            except ValueError:
                print("Please enter valid numbers!")
    
    return matrix

def display_menu():
    """Display the main menu"""
    print("\nMagic Square Program")
    print("===================")
    print("1. Generate a Magic Square")
    print("2. Check if a Matrix is a Magic Square")
    print("3. Exit")
    return input("Enter your choice (1-3): ")

def main():
    while True:
        choice = display_menu()
        
        if choice == '1':
            size = get_valid_size()
            square = MagicSquare(size)
            square.generate()
            print("\nGenerated Magic Square:")
            square.display()
            
            if square.verify():
                print("\nThis is a valid magic square!")
                sums = square.get_sums()
                print("\nSums verification:")
                print("Row sums:", sums['rows'])
                print("Column sums:", sums['columns'])
                print("Diagonal sums:", sums['diagonals'])
            
        elif choice == '2':
            size = get_valid_size()
            matrix = get_matrix_from_user(size)
            
            try:
                square = MagicSquare(size)
                square.set_square(matrix)
                print("\nYour Matrix:")
                square.display()
                
                if square.verify():
                    print("\nThis is a valid magic square!")
                    sums = square.get_sums()
                    print("\nSums verification:")
                    print("Row sums:", sums['rows'])
                    print("Column sums:", sums['columns'])
                    print("Diagonal sums:", sums['diagonals'])
                else:
                    print("\nThis is NOT a valid magic square!")
                    sums = square.get_sums()
                    print("\nSums (should all be equal for a magic square):")
                    print("Row sums:", sums['rows'])
                    print("Column sums:", sums['columns'])
                    print("Diagonal sums:", sums['diagonals'])
            
            except ValueError as e:
                print(f"\nError: {e}")
                
        elif choice == '3':
            print("\nThank you for using the Magic Square Program!")
            break
        
        else:
            print("\nInvalid choice! Please enter 1, 2, or 3.")

if __name__ == "__main__":
    main()