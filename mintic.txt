import numpy as np
import networkx as nx
import matplotlib.pyplot as plt

class TicTacToeMinimax:
    def _init_(self):
        self.board = np.zeros((3, 3), dtype=int)
        self.graph = nx.DiGraph()
        self.node_counter = 0

    def print_board(self):
        symbol_map = {1: 'X', -1: 'O', 0: ' '}
        for row in self.board:
            print('|'.join([symbol_map[cell] for cell in row]))
            print('-' * 5)

    def check_winner(self, board=None):
        if board is None:
            board = self.board

        # Check rows and columns
        for i in range(3):
            # Rows
            if abs(sum(board[i, :])) == 3:
                return board[i, 0]
            # Columns
            if abs(sum(board[:, i])) == 3:
                return board[0, i]
        
        # Diagonals
        if abs(sum(board.diagonal())) == 3:
            return board[0, 0]
        if abs(sum(np.fliplr(board).diagonal())) == 3:
            return np.fliplr(board)[0, 0]
        
        # Check for draw
        if np.all(board != 0):
            return 0
        
        return None

    def minimax(self, board, depth, is_maximizing, alpha=float('-inf'), beta=float('inf')):
        # Limit depth to prevent excessive computation
        if depth > 4:
            return 0

        # Create unique node ID
        node_id = self.node_counter
        self.node_counter += 1
        
        # Convert board to tuple for graph
        board_tuple = tuple(map(tuple, board))

        result = self.check_winner(board)
        
        # Terminal states
        if result is not None:
            # Add terminal node with its value
            self.graph.add_node(node_id, 
                                board=board_tuple, 
                                depth=depth, 
                                maximizing=is_maximizing,
                                value=result,
                                node_type='Terminal')
            return result

        if is_maximizing:
            best_score = float('-inf')
            for i in range(3):
                for j in range(3):
                    if board[i][j] == 0:
                        board_copy = board.copy()
                        board_copy[i][j] = 1
                        
                        # Recursive call
                        score = self.minimax(board_copy, depth + 1, False, alpha, beta)
                        
                        # Add node with its score
                        child_id = self.node_counter - 1
                        self.graph.add_node(child_id, 
                                            board=tuple(map(tuple, board_copy)), 
                                            depth=depth+1, 
                                            maximizing=False,
                                            value=score,
                                            node_type='Max')
                        # Add edge
                        self.graph.add_edge(node_id, child_id)
                        
                        # Update best score
                        best_score = max(best_score, score)
                        
                        # Alpha-beta pruning
                        alpha = max(alpha, score)
                        if beta <= alpha:
                            break
            
            # Add maximizing node with its best score
            self.graph.add_node(node_id, 
                                board=board_tuple, 
                                depth=depth, 
                                maximizing=is_maximizing,
                                value=best_score,
                                node_type='Max')
            return best_score
        else:
            best_score = float('inf')
            for i in range(3):
                for j in range(3):
                    if board[i][j] == 0:
                        board_copy = board.copy()
                        board_copy[i][j] = -1
                        
                        # Recursive call
                        score = self.minimax(board_copy, depth + 1, True, alpha, beta)
                        
                        # Add node with its score
                        child_id = self.node_counter - 1
                        self.graph.add_node(child_id, 
                                            board=tuple(map(tuple, board_copy)), 
                                            depth=depth+1, 
                                            maximizing=True,
                                            value=score,
                                            node_type='Min')
                        # Add edge
                        self.graph.add_edge(node_id, child_id)
                        
                        # Update best score
                        best_score = min(best_score, score)
                        
                        # Alpha-beta pruning
                        beta = min(beta, score)
                        if beta <= alpha:
                            break
            
            # Add minimizing node with its best score
            self.graph.add_node(node_id, 
                                board=board_tuple, 
                                depth=depth, 
                                maximizing=is_maximizing,
                                value=best_score,
                                node_type='Min')
            return best_score

    def find_best_move(self):
        best_score = float('-inf')
        best_move = None
        
        for i in range(3):
            for j in range(3):
                if self.board[i][j] == 0:
                    self.board[i][j] = 1
                    score = self.minimax(self.board.copy(), 0, False)
                    self.board[i][j] = 0
                    
                    if score > best_score:
                        best_score = score
                        best_move = (i, j)
        
        return best_move

    def visualize_decision_tree(self):
        plt.figure(figsize=(20, 15))
        pos = nx.spring_layout(self.graph, k=0.9, iterations=50)
        
        # Node colors and sizes
        node_colors = []
        node_sizes = []
        
        for node in self.graph.nodes():
            data = self.graph.nodes[node]
            
            # Size based on depth
            node_sizes.append(300 / (data['depth'] + 1))
            
            # Color based on node type
            if data.get('node_type') == 'Terminal':
                node_colors.append('red')
            elif data.get('node_type') == 'Max':
                node_colors.append('blue')
            else:
                node_colors.append('green')
        
        # Draw the graph
        nx.draw(self.graph, pos, 
                node_color=node_colors, 
                node_size=node_sizes, 
                with_labels=False,
                arrows=True)
        
        # Add labels with board states and values
        labels = {}
        for node in self.graph.nodes():
            data = self.graph.nodes[node]
            board = data['board']
            
            # Convert board to readable string
            board_str = '\n'.join([''.join(map(str, row)) for row in board])
            
            # Create label with board state, value, and node type
            label = (f"{board_str}\n"
                     f"Value: {data.get('value', 'N/A')}\n"
                     f"Type: {data.get('node_type', 'N/A')}")
            labels[node] = label
        
        nx.draw_networkx_labels(self.graph, pos, labels, font_size=6)
        
        plt.title("Minimax Decision Tree for Tic Tac Toe")
        plt.axis('off')
        plt.tight_layout()
        plt.show()

    def play(self, visualize=True):
        # Reset board and graph
        self.board = np.zeros((3, 3), dtype=int)
        self.graph = nx.DiGraph()
        self.node_counter = 0

        while not self.check_winner():
            # Player's turn (O)
            self.print_board()
            while True:
                try:
                    row = int(input("Enter row (0-2): "))
                    col = int(input("Enter column (0-2): "))
                    if 0 <= row < 3 and 0 <= col < 3 and self.board[row][col] == 0:
                        self.board[row][col] = -1
                        break
                    else:
                        print("Invalid move. Try again.")
                except ValueError:
                    print("Please enter valid numbers.")
            
            # Check if game is over after player's move
            if self.check_winner():
                break
            
            # AI's turn (X)
            print("AI is making a move...")
            ai_move = self.find_best_move()
            
            # Safeguard against None move
            if ai_move is None:
                print("No valid move found. Game cannot continue.")
                break
            
            self.board[ai_move[0]][ai_move[1]] = 1
        
        # Final board state
        self.print_board()
        
        # Determine winner
        result = self.check_winner()
        if result == 1:
            print("X wins!")
        elif result == -1:
            print("O wins!")
        else:
            print("It's a draw!")
        
        # Visualize decision tree
        if visualize:
            self.visualize_decision_tree()

def main():
    game = TicTacToeMinimax()
    game.play()

if __name__ == "__main__":
    main()