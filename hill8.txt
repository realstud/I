import copy
import networkx as nx
import matplotlib.pyplot as plt

# Define grid size (3x3 for 8-puzzle)
n = 3  
rows = [1, 0, -1, 0]  # Moves: Down, Left, Up, Right
cols = [0, -1, 0, 1]  

def calculate_cost(mats, goal):  
    return sum(1 for i in range(n) for j in range(n) if mats[i][j] and mats[i][j] != goal[i][j])  

def new_state(mats, empty_tile_pos, new_empty_tile_pos):  
    new_mats = copy.deepcopy(mats)  
    x1, y1 = empty_tile_pos  
    x2, y2 = new_empty_tile_pos  
    new_mats[x1][y1], new_mats[x2][y2] = new_mats[x2][y2], new_mats[x1][y1]  
    return new_mats  

def is_safe(x, y):  
    return 0 <= x < n and 0 <= y < n  

def puzzle_to_str(puzzle):
    return " | ".join(" ".join(map(str, row)) for row in puzzle)

def get_user_input(state_name):  
    print(f"\nEnter the {state_name} state (row-wise, space-separated, using numbers 0-8):")  
    puzzle = []
    seen_numbers = set()
    for i in range(n):  
        while True:
            try:
                row = list(map(int, input(f"Row {i+1}: ").split()))
                if len(row) != n or any(num < 0 or num > 8 for num in row):
                    raise ValueError
                if any(num in seen_numbers for num in row):
                    raise ValueError("Duplicate numbers found!")
                seen_numbers.update(row)
                puzzle.append(row)
                break
            except ValueError:
                print("❌ Invalid input! Ensure unique numbers from 0-8, row-wise.")
    for i in range(n):  
        for j in range(n):  
            if puzzle[i][j] == 0:  
                empty_tile_pos = (i, j)  
    return puzzle, empty_tile_pos  

def hill_climbing(initial, empty_tile_pos, goal):  
    current = initial  
    current_pos = empty_tile_pos  
    visited = {}
    parent_map = {}
    G = nx.DiGraph()
    
    initial_str = puzzle_to_str(current)
    initial_heuristic = calculate_cost(current, goal)
    G.add_node(initial_str, heuristic=initial_heuristic)
    visited[initial_str] = initial_heuristic
    steps = [current]
    heuristic_values = [initial_heuristic]
    
    while heuristic_values[-1] > 0:  
        best_move = None  
        best_heuristic = heuristic_values[-1]  
        
        for i in range(4):  
            new_x, new_y = current_pos[0] + rows[i], current_pos[1] + cols[i]  
            if is_safe(new_x, new_y):  
                new_mats = new_state(current, current_pos, (new_x, new_y))  
                new_state_str = puzzle_to_str(new_mats)
                new_heuristic = calculate_cost(new_mats, goal)  
                
                if new_state_str not in visited or new_heuristic < visited[new_state_str]:
                    visited[new_state_str] = new_heuristic
                    parent_map[new_state_str] = puzzle_to_str(current)
                    G.add_node(new_state_str, heuristic=new_heuristic)
                    G.add_edge(puzzle_to_str(current), new_state_str)
                    
                if new_heuristic < best_heuristic:  
                    best_move = new_mats  
                    best_heuristic = new_heuristic  
                    new_pos = (new_x, new_y)  
        
        if best_move is None:  
            break  
        current = best_move  
        current_pos = new_pos  
        steps.append(current)
        heuristic_values.append(best_heuristic)
    
    print("\n🛑 Hill Climbing Stuck! Local Minima Reached." if heuristic_values[-1] > 0 else "\n✅ Solution Found!")  
    for i, state in enumerate(steps):  
        print(f"\nStep {i} - Heuristic: {heuristic_values[i]}")
        for row in state:
            print(" ".join(map(str, row)))  
    
    solution_path = []
    state = puzzle_to_str(current)
    while state in parent_map:
        parent = parent_map[state]
        if parent in G.nodes and state in G.nodes:
            solution_path.append((parent, state))
        state = parent
    
    if G.number_of_nodes() > 1:
        pos = nx.nx_agraph.graphviz_layout(G, prog="dot")  # Use hierarchical layout
        plt.figure(figsize=(12, 8))
        
        # Draw the graph with heuristic values in the node labels
        node_labels = {node: f"{node}\nH: {G.nodes[node]['heuristic']}" for node in G.nodes}
        nx.draw(G, pos, with_labels=True, node_color='lightblue', edge_color='black', font_size=8, labels=node_labels)
        nx.draw_networkx_edges(G, pos, edgelist=solution_path, edge_color='red', width=2)
        plt.title("8-Puzzle Hill Climbing Search Tree with Heuristic Values")
        plt.show()
    else:
        print("⚠ No valid moves were found. The puzzle might already be in a local minimum.")

if __name__ == "__main__":  
    initial, empty_tile_pos = get_user_input("initial")  
    goal, _ = get_user_input("goal")  
    hill_climbing(initial, empty_tile_pos, goal)
