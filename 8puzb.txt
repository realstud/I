import heapq
import networkx as nx
import matplotlib.pyplot as plt

class PuzzleSolver:
    def __init__(self, start, goal):
        """Initialize the 8-Puzzle solver with start and goal states."""
        self.start = start
        self.goal = goal

    def heuristic(self, state):
        """Calculate the heuristic value (number of misplaced tiles)."""
        return sum(1 for i in range(9) if state[i] != self.goal[i] and state[i] != 0)

    def get_neighbors(self, state):
        """Generate possible moves by swapping the empty tile (0) with its neighbors."""
        neighbors = []
        idx = state.index(0)  # Find the empty tile (0)
        moves = {
            0: [1, 3], 1: [0, 2, 4], 2: [1, 5],
            3: [0, 4, 6], 4: [1, 3, 5, 7], 5: [2, 4, 8],
            6: [3, 7], 7: [4, 6, 8], 8: [5, 7]
        }
        
        for move in moves[idx]:
            new_state = list(state)
            new_state[idx], new_state[move] = new_state[move], new_state[idx]  # Swap
            neighbors.append((tuple(new_state), move))
        
        return neighbors

    def best_first_search(self):
        """Best-First Search Algorithm for 8-Puzzle."""
        priority_queue = []
        heapq.heappush(priority_queue, (self.heuristic(self.start), self.start))
        visited = set()
        parent = {self.start: (None, "Start")}

        graph = nx.DiGraph()  # Directed graph for tree visualization
        graph.add_node(self.start, heuristic=self.heuristic(self.start))

        while priority_queue:
            heuristic_value, current = heapq.heappop(priority_queue)
            visited.add(current)
            
            if current == self.goal:
                # Reconstruct the solution path
                path = []
                while current:
                    path.append((current, parent[current][1], self.heuristic(current)))
                    current = parent[current][0]
                solution_path = path[::-1]  # Reverse the path

                self.plot_tree(graph, solution_path)  # Plot the tree
                return solution_path  # Return solution path
            
            for neighbor, move in self.get_neighbors(current):
                if neighbor not in visited:
                    heapq.heappush(priority_queue, (self.heuristic(neighbor), neighbor))
                    visited.add(neighbor)
                    parent[neighbor] = (current, move)
                    if neighbor not in graph.nodes:
                        graph.add_edge(current, neighbor)
                        graph.add_node(neighbor, heuristic=self.heuristic(neighbor))

        return None  # No solution found

    @staticmethod
    def get_input():
        """Get user input for the 8-puzzle start and goal states."""
        print("Enter the 8-puzzle initial state row by row (use 0 for blank, space-separated):")
        start = tuple(int(num) for _ in range(3) for num in input().split())
        print("Enter the 8-puzzle goal state row by row (use 0 for blank, space-separated):")
        goal = tuple(int(num) for _ in range(3) for num in input().split())
        return start, goal

    def display_state(self, state, direction, heuristic_value):
        """Display the puzzle state in a structured format with heuristic values."""
        print(f"Move: {direction}, Heuristic: {heuristic_value}")
        for i in range(0, 9, 3):
            print("+---+---+---+")
            print(f"| {state[i] if state[i] != 0 else ' '} | {state[i+1] if state[i+1] != 0 else ' '} | {state[i+2] if state[i+2] != 0 else ' '} |")
        print("+---+---+---+\n")

    def plot_tree(self, graph, solution_path):
        """Improved Tree Visualization using Graphviz."""
        try:
            from networkx.drawing.nx_agraph import graphviz_layout
            pos = graphviz_layout(graph, prog="dot", args="-Grankdir=TB -Gnodesep=0.6 -Granksep=1.0")  # Increased spacing
        except ImportError:
            pos = nx.spring_layout(graph, seed=42)  # Fallback

        # Compact Labels: Display heuristic only
        labels = {node: f"H: {graph.nodes[node]['heuristic']}" for node in graph.nodes}

        plt.figure(figsize=(16, 10))  # Larger figure for better spacing
        nx.draw(
            graph, pos, with_labels=True, labels=labels, node_size=1400, 
            node_color='skyblue', font_size=9, font_weight='bold', alpha=0.85, edge_color='gray'
        )

        # Highlight the solution path
        solution_nodes = [step[0] for step in solution_path]
        edges = [(solution_nodes[i], solution_nodes[i + 1]) for i in range(len(solution_nodes) - 1)]
        nx.draw_networkx_edges(graph, pos, edgelist=edges, edge_color='red', width=2.5)

        plt.title("8-Puzzle Search Tree (Best First Search) with Heuristic Values", fontsize=14)
        plt.show()

if __name__ == "__main__":
    start, goal = PuzzleSolver.get_input()
    if len(start) != 9 or len(goal) != 9:
        print("Invalid input! Please enter exactly 9 numbers.")
    else:
        solver = PuzzleSolver(start, goal)
        result = solver.best_first_search()
        if result:
            print("Solution found in steps:")
            for step, move_direction, heuristic_value in result:
                solver.display_state(step, move_direction, heuristic_value)
        else:
            print("No solution found!")
